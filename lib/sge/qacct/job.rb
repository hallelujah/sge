module SGE
  module QAcct
    # This class is used for loading jobs from a YAML file generated by transform_qacct_to_yaml
    class Job
      FIELDS = [:qname, :hostname, :group, :owner, :project, :department, :jobname, :jobnumber, :taskid, :account, :priority, :qsub_time, :start_time, :end_time, :granted_pe, :slots, :failed, :exit_status, :ru_wallclock, :ru_utime, :ru_stime, :ru_maxrss, :ru_ixrss, :ru_ismrss, :ru_idrss, :ru_isrss, :ru_minflt, :ru_majflt, :ru_nswap, :ru_inblock, :ru_oublock, :ru_msgsnd, :ru_msgrcv, :ru_nsignals, :ru_nvcsw, :ru_nivcsw, :cpu, :mem, :io, :iow, :maxvmem, :arid]

      attr_accessor *FIELDS

      def initialize(opts = {})
        FIELDS.each do |a|
          instance_variable_set("#{a}", opts[a]) if opts.key?(a)
        end
      end

      def self.load_documents(opts)
        documents = []
        transformer = SGE::QAcct::Transformer.new
        # Compute command
        cmd = command(opts)
        # Make a fifo to dump
        fifo = opts[:file] || SGE::Utils.mkfifo(opts[:tmp_dir])
        # Add transformer to yaml command
        cmd = transformer.command(opts.merge(:cmd => cmd, :file => fifo))
        # Execute this command
        execute(cmd)
        # Load documents
        transformer.load_from_yaml_file(fifo, opts[:remove_file]) do |doc|
          documents << doc
        end
        documents
      end

      def self.command(opts)
       return opts[:cmd] if opts[:cmd]
       raise "Not Implemented Yet"
      end

      def self.execute(cmd)
        # The same as `#{cmd}`
        Kernel.send("`",cmd)
      end

    end
  end
end
